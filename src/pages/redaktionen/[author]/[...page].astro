---
import type { GetStaticPaths, Page } from "astro";
import type { CollectionEntry } from "astro:content";

import Pagination from "@/components/Paginator.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import { getAllPosts, getAuthorBios, getUniqueAuthors, sortMDByDate } from "@/data/post";
import PageLayout from "@/layouts/Base.astro";
import type { DataEntryMap } from "astro:content";
import { getPathByLocale } from "astro:i18n";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
	const allPosts = await getAllPosts();
	const allPostsByDate = sortMDByDate(allPosts);
	const uniqueAuthors = getUniqueAuthors(allPostsByDate);

	return uniqueAuthors.flatMap((author) => {
		const filterPosts = allPostsByDate.filter((post) => post.data.author.includes(author));
		return paginate(filterPosts, {
			pageSize: 10,
			params: { author },
		});
	});
};

interface Props {
	page: Page<CollectionEntry<"post">>;
}

const { page } = Astro.props;
const { author } = Astro.params;

const meta = {
	description: `Alla inlägg av - ${author}`,
	title: `Skribent: ${author}`,
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			text: `← Föregående`,
			url: page.url.prev,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			text: `Nästa →`,
			url: page.url.next,
		},
	}),
};

/* === Get bio === */
const bios = await getAuthorBios();
const authorBio = bios.filter((bio) => bio.data.name == author);
var bio: any;
if (authorBio.length == 1) bio = authorBio[0];
---

<PageLayout meta={meta}>
	<h1 class="title mb-6 flex items-center">
		<a class="text-accent sm:hover:underline" href="/redaktionen/">Redaktionen</a>
		<!--span class="me-3 ms-2">→</span-->
        <span class="mx-1 font-normal">/</span>
		<span class="">{author}</span>
	</h1>
    <section aria-label="Author bio">
        { bio && ( <>
        <div class="flex flex-col sm:flex-row gap-4 items-center sm:items-start">
            { bio.data.photo && (
                <>
                <img 
                    src={bio.data.photo.src.src} 
                    alt={bio.data.photo.alt ? bio.data.photo.alt : author}
                    class="rounded-full h-48 w-48 aspect-square object-cover mb-4"
                >
                </>
            )}
            <div>
                { bio.data.bio && (
                    <p class="prose text-textColor">
                        {bio.data.bio}
                    </p>
                )}
                { bio.data.links && (
                    <ul class="pt-2 pb-4">
                        <span class="prose font-normal text-textColor">{author}s länkar:</span>
                        { bio.data.links.map((l: any) => (
                            <>
                            <a class="text-accent prose" href={l.href}>{l.name}</a>{l != bio.data.links[bio.data.links.length-1] && (<span>, </span>)}
                            </>
                        )) }
                    </ul>
                )}
            </div>
        </div>
        </>)}
    </section>
	<section aria-label="Blog post list" class="mt-2">
		<ul class="space-y-6">
			<hr>
			{
				page.data.map((p) => (
					<li class="grid gap-x-1 grid-cols-[1fr_auto] sm:[&_q]:col-start-2">
						<PostPreview as="h2" post={p} withDesc withAuthor={false} />
					</li>
					<hr>
				))
			}
		</ul>
		<Pagination {...paginationProps} />
	</section>
</PageLayout>

---
import type { CollectionEntry } from "astro:content";

import { Image } from "astro:assets";

import FormattedDate from "../FormattedDate.astro";

interface Props {
	content: CollectionEntry<"post">;
}

const {
	content: { data, render },
} = Astro.props;

const { remarkPluginFrontmatter } = await render();

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: "long",
};
---

{
	data.coverImage && (
        <>
        
        {
        data.largeCoverImage ? (
            <div class="pointer-events-none hidden lg:block ">
                <div class=" absolute translate-x-[-10rem] w-[64rem]">
                    <div class=" flex justify-center items-start h-[64rem]">
                    <Image
                        alt={data.coverImage.alt}
                        class="object-contain pointer-events-auto"
                        fetchpriority="high"
                        loading="eager"
                        src={data.coverImage.src}
                    />
                    </div>
                </div>
                <div class={`pointer-events-none opacity-0 w-full `} style={`margin-bottom: `+(data.coverImage.src.height/data.coverImage.src.width*365-32)+`px;`}> 
                    <Image
                        alt={data.coverImage.alt}
                        class="object-contain"
                        fetchpriority="high"
                        loading="eager"
                        src={data.coverImage.src}
                    />
                </div>
            </div>
            <div class="pointer-events-none lg:hidden mb-0">
                <div class=" absolute w-full left-0 aspect-h-1 aspect-w-1">
                    <div class="flex items-start justify-center h-[100vw]">
                        <div class="max-w-3xl">
                    <Image
                        alt={data.coverImage.alt}
                        class="object-contain pointer-events-auto"
                        fetchpriority="high"
                        loading="eager"
                        src={data.coverImage.src}
                    /></div>
                </div>
                </div>
                <div class="pointer-events-none opacity-0 flex items-start w-full mb-16">
                    <Image
                        alt={data.coverImage.alt}
                        class="object-contain"
                        fetchpriority="high"
                        loading="eager"
                        src={data.coverImage.src}
                    />
                </div>
            </div>
        ) : (
            <div class="hidden lg:block mb-0 aspect-h-9 aspect-w-16">
                <Image
                    alt={data.coverImage.alt}
                    class="object-cover"
                    fetchpriority="high"
                    loading="eager"
                    src={data.coverImage.src}
                />
            </div>
            <div class="lg:hidden customHeight mb-0">
                <div class="absolute w-full left-0 aspect-h-9 aspect-w-16">
                    <Image
                        alt={data.coverImage.alt}
                        class="object-cover"
                        fetchpriority="high"
                        loading="eager"
                        src={data.coverImage.src}
                    />
                </div>
            </div>
        )}
        </>
	)
}
<div class="mb-4 lg:mb-6">
    {data.coverCaption && (<figcaption>{data.coverCaption}</figcaption>)}
</div>

{data.draft ? <span class="text-base text-red-500">(Draft)</span> : null}

<!-- Title -->
<h1 class="title mb-3 sm:mb-1">
	{data.title}
</h1>

<!-- Page Views -->
<p class="float-right" id="viewCountText"></p>

<!-- Date -->
<span class="items-center gap-x-3 gap-y-2">
	<span class="font-semibold right">
		<FormattedDate date={data.publishDate} dateTimeOptions={dateTimeOptions} /> 
		<!--/{" "} {remarkPluginFrontmatter.minutesRead}-->
	</span>
	{
		data.updatedDate && (
			<span class="rounded-lg bg-quote/10 p-1 text-quote">
				Last Updated:
				<FormattedDate class="ms-1" date={data.updatedDate} dateTimeOptions={dateTimeOptions} />
			</span>
		)
	}
</span>

<!-- Authors -->
{!!data.author.length && (
	<span class="font-normal">
		av {data.author.map((author, i) => 	
			<>	
			<a class="underline cactus-link "
			   aria-label={`View more blogs by ${author}`}
			   href={`/redaktionen/${author}/`}
			>{author}</a>
			{i < data.author.length - 2 && ", "}
			{i == data.author.length - 2 && " & "}
			</>
		)}
	</span>
)}

<!-- Tags -->
{
	!!data.tags?.length && (
		<div class="mt-3">
			<svg
				aria-hidden="true"
				class="inline-block h-6 w-6"
				fill="none"
				focusable="false"
				stroke="currentColor"
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="1.5"
				viewBox="0 0 24 24"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path d="M0 0h24v24H0z" fill="none" stroke="none" />
				<path d="M7.859 6h-2.834a2.025 2.025 0 0 0 -2.025 2.025v2.834c0 .537 .213 1.052 .593 1.432l6.116 6.116a2.025 2.025 0 0 0 2.864 0l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-6.117 -6.116a2.025 2.025 0 0 0 -1.431 -.593z" />
				<path d="M17.573 18.407l2.834 -2.834a2.025 2.025 0 0 0 0 -2.864l-7.117 -7.116" />
				<path d="M6 9h-.01" />
			</svg>
			{data.tags.map((tag, i) => (
				<>
					<a
						aria-label={`View more blogs with the tag ${tag}`}
						class="cactus-link inline-block before:content-['#']"
						data-pagefind-filter="tag"
						href={`/tags/${tag}/`}
					>{tag}</a>{i < data.tags.length - 1 && ", "}
				</>
			))}
		</div>
	)
}

<style>
    .customHeight {
        height: calc(100vw / 16 * 9);
    }
</style>

<!-- JavaScript to fetch and update view count -->
<script is:inline>
    var current_page = window.location.href;
    fetch("/.netlify/functions/pageViewCounter?page=" + encodeURIComponent(current_page), {
      method: "GET",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
    })
      .then((response) => response.json())
      .then((data) => {
        // Extract view_count from response
        var viewCount = data.data.view_count;

        // Update viewCount text content
        document.getElementById("viewCountText").textContent = viewCount+" ðŸ‘€";
      })
      .catch((error) => console.error("Error:", error));
</script>
---
import { getEntry } from 'astro:content';
import { getAllPosts, sortMDByDate } from "@/data/post";
import Comment from '@/components/blog/Comment.astro';

const slug = Astro.url.toString().split('/posts/')[1].split("/")[0] as string;
const commentsEntry = await getEntry('comments', slug);
const comments = commentsEntry?.data?.comments || [];
const parentId = null;

const allPosts = await getAllPosts();
const thePost = allPosts.filter(post=>(encodeURIComponent(post.slug)==slug))[0];

comments
  .filter((comment: any) => comment.parentId === parentId)
  .sort((a: any, b: any) => {
    return Math.floor(new Date(a.createdAt).getTime() / 1000) -
           Math.floor(new Date(b.createdAt).getTime() / 1000);
  });

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: "short",
};
---

<div class="prose max-w-full m-0 mt-6 text-textColor">
    {comments.length > 0 && (
        <h2 class="mb-12 text-textColor">{comments.length} Kommentar{(comments.length > 1 ? "er:" : ":")}</h2>
    )}
    <ul class="p-0">
        {comments.map((data: { id: string | null | undefined; parentId: number | null | undefined; createdBy: { fullName: string; }; createdAt: Date; email: unknown; html: any; answers: any | null | undefined}, i: number) => (
            
            <Comment
                id={data.id}
                parentId={data.parentId}
                createdBy={data.createdBy}
                createdAt={data.createdAt}
                email={data.email}
                html={data.html}
                answers={data.answers}
                thePost={thePost}
                last={i == comments.length-1}
            />
            
        ))}
    </ul>
</div>
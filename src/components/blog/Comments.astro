---
import { getEntry } from 'astro:content';
import FormattedDate from '../FormattedDate.astro';

const slug = Astro.url.toString().split('/posts/')[1].split("/")[0] as string;
const commentsEntry = await getEntry('comments', slug);
const comments = commentsEntry?.data?.comments || [];
const parentId = null;
console.log(slug);

comments
  .filter((comment: any) => comment.parentId === parentId)
  .sort((a: any, b: any) => {
    return Math.floor(new Date(a.createdAt).getTime() / 1000) -
           Math.floor(new Date(b.createdAt).getTime() / 1000);
  });

console.log(slug+" comments: ");
console.log(comments);

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: "short",
};
---

<div class="prose max-w-full m-0 mt-6">
    {comments.length > 0 && (
        <h3>Kommentarer:</h3>
    )}
    <ul class="p-0">
        
        {comments.map((data: { id: string | null | undefined; createdBy: { fullName: unknown; }; createdAt: Date; website: unknown; html: any; }, i: number) => (
            <>
            <div class="line"></div>
            <div class="comment" id={data.id}>
                <span><h4 id="name" class="inline">{data.createdBy.fullName}</h4>
                <FormattedDate class="text-sm date inline" date={data.createdAt} dateTimeOptions={dateTimeOptions}/></span>
                {data.website && (<a href={"https://"+data.website} id="website"> {data.website}</a>)}
                <hr class="m-0 my-3" />
                <div class="message">
                    <span
                        set:html={data.html}
                    />
                </div>
            </div>
            <div class="mt-12 mb-4">
                <a class="hidden text-sm p-0">svara</a>
                {(i < comments.length-1) && (
                    <hr class="m-0 border-gray-300 border-solid"/>
                )}
            </div>
            </>
        ))}
    </ul>
</div>

<!--                 <a class="text-sm">svara</a>
 -->
---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { CollectionEntry } from "astro:content";

import { getPostSortDate } from "@/data/post";

import FormattedDate from "../FormattedDate.astro";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	post: CollectionEntry<"post">;
	withDesc?: boolean;
	withAuthor?: boolean;
};

const { as: Tag = "span", post, withDesc = false, withAuthor = true } = Astro.props;
const postDate = getPostSortDate(post);
---

<FormattedDate class="sm:col-span-1 sm:min-w-[80px] text-gray-600 dark:text-gray-400" date={postDate} />
<!-- Author -->
{ withAuthor && (
!!post.data.author.length && (
	<span class="sm:hidden font-normal text-gray-500 sm:min-w-[190px]">
		av {post.data.author.map((author, i) => 	
			<>	
				<a class="underline cactus-link"
				aria-label={`View more blogs by ${author}`}
				href={`/redaktionen/${author}/`}
				>{author}</a>
				{i < post.data.author.length - 2 && ", "}
				{i == post.data.author.length - 2 && " & "}
			</>
		)}
	</span>
)
)}
<Tag class:list={"col-span-3 sm:col-span-1 mb-4 sm:m-0"}>
	{post.data.draft && <span class="text-red-500">(Draft) </span>}
	<a class="cactus-link" data-astro-prefetch href={`/posts/${post.slug}/`}>
		{post.data.title}
	</a>
</Tag>
{ withAuthor && (
	!!post.data.author.length && (
		<span class="hidden sm:block ml-1 font-normal text-gray-500 sm:min-w-[190px]">
			av {post.data.author.map((author, i) => 	
				<>	
					<a class="underline cactus-link"
					aria-label={`View more blogs by ${author}`}
					href={`/redaktionen/${author}/`}
					>{author}</a>
					{i < post.data.author.length - 2 && ", "}
					{i == post.data.author.length - 2 && " & "}
				</>
			)}
		</span>
	)
)}
{withDesc && <q class="line-clamp-3 italic">{post.data.description}</q>}
